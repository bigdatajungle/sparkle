sparkle-time-server { // TODO rename to sparkle 
  // start the protocol server at launch
  auto-start = true

  // custom HTTP APIs 
  apis = []
  
  // driver to use for reading (storage is typically e.g. cassandra or RAM.  Or build your own that fulfills the Storage api)
  store = nest.sparkle.store.cassandra.ConfiguredCassandraReader
  
  // driver to use for writing to storage (e.g. for stream loading)
  writeable-store = nest.sparkle.store.cassandra.ConfiguredCassandraWriter
  
  // erase and reformat the store on launch (e.g. for integration tests)
  erase-store = false
  
  // set to ["*"] to open /v1/data api to _all_ requests (useful for internal development) 
  cors-hosts = []
  
  files-loader {
    // true to start the files loader when launching
    auto-start = false
    
    // set to paths of file system directories containing data files to load into the server
    // the directories are recursively searched for .csv/.tsv files
    directories = []
    
    // load .csv/.tsv lines in batches up to this size 
    // (larger batches use more memory but might be faster)    
    batch-size = 10000
  }
  
  // list of class names to make available as custom selectors to protocol requests
  // the classes should be subclasses of CustomSourceSelector and take constructor parameters
  // of type com.typesafe.config.Config and type nest.sparkle.store.Store 
  custom-selectors = []

  // list of class names to make available as custom transforms to protocol requests
  // the classes should be subclasses of CustomTransform and take a constructor parameter
  // of type com.typesafe.config.Config 
  custom-transforms = []
  
  // configuration for the cassandra storage
  sparkle-store-cassandra {
    // one or more of the cassandra server hosts.  
    contact-hosts = [localhost] 
    
    // All sparkle data goes into a keyspace with this name.
    // The keyspace is created on demand if it does not exist. 
    // Multiple servers can share the same cassandra service if they use separate keypsaces.
    key-space = events
    
    // replication factor for the sparkle cassandra keyspace
    // note that this only takes effect when the keyspace is first created. 
    replication-factor = 1
  }
  
  // web UI for internal administration
  admin {
    // tcp port for http connections
    port = 1235
    
    // network interface for admin http server 
    interface = 0.0.0.0
  }
  
  // tcp port for http connections
  port = 1234
  
  // Location of custom web dashboard content. The web server will look in the provided directory or
  // resource path for (e.g. .html/.js) content to serve. The server will also  look in
  // the provided directory for a file named index.html to serve in response to http requests
  // without a path. Application .conf files should put a single path in either directory or resource.
  web-root {  
    // dashboard from filesystem directory. 
    directory = []
    
    // dashboard from classpath resource 
    resource = []
  }
  
  // authentication & authorization 
  auth = {    
    // provider must be subclass of AuthProvider. It provides for authentication
    // and authorization of client requests. AuthProvider subclasses must
    // have a constructor with a single Config parameter.
    //
    // The default AuthProvider allows all access to everyone. 
    provider = "nest.sparkle.time.protocol.AllAuthorized"
  } 
  
  // alternate config for basic authentication: a single static password
//  auth = {    
//    // authenticate with a static password. Having the password provides full access.
//    provider = "nest.sparkle.time.protocol.StaticAuthentication"
//    
//    // configure the static password for the StaticAuthentication AuthProvider here
//    password = "globalSecret"
//  } 
  
  resource-web-root = []
      
  logging {

    levels {
      // set the root logging level (default level for all loggers)
      root = INFO
      
      // example of changing the logging level for a particular logger
      // nest.sparkle.time.server.ConfiguredDataServer = TRACE
      nest.sparkle = DEBUG
    }

    console {
      enable = true  // write messages to the console if true
      pattern.logback = "%d{HH:mm:ss.SSS} %-5level %logger{1} - %msg%n"
      pattern.log4j   = "%d{HH:mm:ss.SSS} %-5p %c - %m%n"
      level = WARN
    }

    file {
      enable = true                           // write messages to a file if true
      path.logback = "/tmp/sparkle.log"       // path and log file name 
      path.log4j   = "/tmp/sparkle.log4j.log" // path and log file name 
      max-size = "10MB"              // max file size 
      max-files = 2                  // number of files to keep
      append = true                  // append to existing file if present
      pattern.logback = "%date{MM/dd HH:mm:ss.SSS} %-5level %logger{1} - %msg%n"
      pattern.log4j   = "%d{MM/dd HH:mm:ss.SSS} %-5p %c - %m%n"
      level = DEBUG
    }
  }
  
  // turn on client address reporting (turn off if behind nginx)
  spray.can.server.remote-address-header = true
  
  akka {
    loglevel = DEBUG
    loggers = ["akka.event.slf4j.Slf4jLogger"]
    log-dead-letters = 0
    log-dead-letters-during-shutdown = off   // to quiet IO-HTTP/listener
  }
}

exporter {  // TODO move inside of sparkle {}
  timeout = 5m  // time to wait for an export to complete
}


