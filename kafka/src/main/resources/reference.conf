sparkle-time-server { // TODO rename to sparkle
    
  logging {
    levels {
      org.apache.zookeeper.ClientCnxn = INFO
      kafka.producer.BrokerPartitionInfo = ERROR
      kafka.producer.async.DefaultEventHandler = OFF
    }

    file {
      path.logback = "/tmp/kafka-loader.log"
      path.log4j   = "/tmp/kafka-loader.log4j.log"
    }
  }

  kafka-loader {
    // set to true to automatically the kafka loader at startup
    auto-start = false
    
    kafka-reader {   // these are copied verbatim to the kafka consumer see http://kafka.apache.org/08/configuration.html
      zookeeper.connect = "localhost:2181"    
      zookeeper.session.timeout.ms = 4000
      zookeeper.sync.time.ms = 200
      auto.offset.reset = smallest
      auto.commit.interval.ms = 1000
      auto.commit.enable = false
      consumer.timeout.ms = 1000000
    }
    
    reader {
      // the kafka reader uses a consumer group per topic to avoid issues restarting the 
      consumer-group-prefix = "defaultConsumer"
    }
    
    kafka-writer {   // these are copied verbatim to the kafka producer see http://kafka.apache.org/08/configuration.html 
      metadata.broker.list = "localhost:9092"
      request.required.acks = 1
// TODO try async later for faster batched sends.. 
//      producer.type = async  
//      queue.buffering.max.ms = 500
    }
    
    // list of topics to stream load
    topics = []
    
    
    // list of filters to apply as data is stream-loaded
    // each filter should be an object of this form:
    // {  
    //    match = "^MyTopicName.*",            // regex to match the topic name 
    //    filter = "mine.domain.MyFilterClass" // filter class to instantiate
    // }
    // 
    // The provided filter class should extend LoadingFilter and should have a single argument
    // constructor that takes a Config parameter
    //
    filters = []
    
    
    // fully qualified class name that will identify a KafkaColumnDecoder for each topic kafka topic. 
    // The implementing subclass must implement the trait FindDecoder and it must have a single argument 
    // constructor that takes a Config parameter
    find-decoder = ""
  }
}
